#  -------------------------------------------------------------------------------------------------
#  TASK 225 (Конвертер километров)
#  -------------------------------------------------------------------------------------------------
#   Напишите функцию convert_to_miles(km), принимает расстояние в километрах и возвращает расстояние в милях.
#   Формула для преобразования: мили = километры * 0.6214.
#  -------------------------------------------------------------------------------------------------

# def convert_to_miles(km):
#     return km * 0.6214

#  -------------------------------------------------------------------------------------------------
#  TASK 226 (Количество дней)
#  -------------------------------------------------------------------------------------------------
#   Напишите функцию get_days(month), принимает  номер месяца и возвращает количество дней в данном месяце.
#  -------------------------------------------------------------------------------------------------

# def get_days(month):
#     if month == 2:
#         return 28
#     elif month == 4 or month == 6 or month == 9 or month == 11:
#         return 30
#     else:
#         return 31

#  -------------------------------------------------------------------------------------------------
#  TASK 227 (Делители 1)
#  -------------------------------------------------------------------------------------------------
#   Напишите функцию get_factors(num), принимающую натуральное число и возвращающую список всех делителей данного числа.
#  -------------------------------------------------------------------------------------------------

# def get_factors(num):
#     return [i for i in range(1, num + 1) if num % i == 0]

#  -------------------------------------------------------------------------------------------------
#  TASK 228 (Делители 2)
#  -------------------------------------------------------------------------------------------------
#   Напишите функцию number_of_factors(num), принимающую число и возвращающую количество делителей данного числа.
#  -------------------------------------------------------------------------------------------------

# def number_of_factors(num):
#     return len([i for i in range(1, num + 1) if num % i == 0])

#  -------------------------------------------------------------------------------------------------
#  TASK 229 (Найти всех)
#  -------------------------------------------------------------------------------------------------
#   Напомним, что строковый метод find('a') возвращает местоположение первого вхождения символа a в строке.
#   Проблема заключается в том, что данный метод не находит местоположение всех символов а.
#   Напишите функцию с именем find_all(target, symbol), которая принимает два аргумента:
#   строку target и символ symbol и возвращает список, содержащий все местоположения этого символа в строке.
#  -------------------------------------------------------------------------------------------------

# def find_all(target, symbol):
#     arr = []
#     for i in range(len(target)):
#         if target[i] == symbol:
#             arr.append(i)
#     return arr

#  -------------------------------------------------------------------------------------------------
#  TASK 230 (Merge lists 1)
#  -------------------------------------------------------------------------------------------------
#   Напишите функцию merge(list1, list2), которая принимает в качестве аргументов два отсортированных
#   по возрастанию списка, состоящих из целых чисел, и объединяет их в один отсортированный список.
#  -------------------------------------------------------------------------------------------------

# def merge(list1, list2):
#     return sorted(list1 + list2)

#  -------------------------------------------------------------------------------------------------
#  TASK 231 (Merge lists 2)
#  -------------------------------------------------------------------------------------------------
#   На вход программе подается число n, а затем n строк, содержащих целые числа в порядке возрастания.
#   Из данных строк формируются списки чисел. Напишите программу, которая объединяет указанные списки
#   в один отсортированный список с помощью функции quick_merge(), а затем выводит его.
#  -------------------------------------------------------------------------------------------------

# def quick_merge(num):
#     arr = []
#     for i in range(num):
#         text = input().split()
#         for i in text:
#             arr.append(int(i))
#     arr.sort()
#     print(*arr)

#  -------------------------------------------------------------------------------------------------
#  TASK 232 (Is Valid Triangle?)
#  -------------------------------------------------------------------------------------------------
#   Напишите функцию is_valid_triangle(side1, side2, side3), которая принимает в качестве аргументов три натуральных
#   числа, и возвращает значение True если существует невырожденный треугольник со сторонами side1, side2, side3 и
#   False в противном случае.
#  -------------------------------------------------------------------------------------------------

# def is_valid_triangle(side1, side2, side3):
#     if side1 < side2 + side3 and side2 < side1 + side3 and side3 < side1 + side2:
#         return True
#     else:
#         return False

#  -------------------------------------------------------------------------------------------------
#  TASK 233 (Is a Number Prime?)
#  -------------------------------------------------------------------------------------------------
#   Напишите функцию is_prime(num), которая принимает в качестве аргумента натуральное число и
#   возвращает значение True если число является простым и False в противном случае.
#  -------------------------------------------------------------------------------------------------

# def is_prime(num):
#     counter = 0
#     for i in range(1, num + 1):
#         if num % i == 0:
#             counter += 1
#     if counter == 2:
#         return True
#     else:
#         return False

#  -------------------------------------------------------------------------------------------------
#  TASK 234 (Next Prime)
#  -------------------------------------------------------------------------------------------------
#   Напишите функцию get_next_prime(num), которая принимает в качестве аргумента натуральное
#   число num и возвращает первое простое число большее числа num.
#  -------------------------------------------------------------------------------------------------

# def get_next_prime(num):
#     while True:
#         num += 1
#         counter = 0
#         for i in range(1, num + 1):
#             if num % i == 0:
#                 counter += 1
#         if counter == 2:
#             return num

#  -------------------------------------------------------------------------------------------------
#  TASK 235 (Good password)
#  -------------------------------------------------------------------------------------------------
#   Напишите функцию is_password_good(password), которая принимает в качестве аргумента строковое значение пароля
#   password и возвращает значение True если пароль является надежным и False в противном случае.
#   Пароль является надежным если: его длина не менее 88 символов; он содержит как минимум одну заглавную букву;
#   он содержит как минимум одну строчную букву (нижний регистр); он содержит хотя бы одну цифру.
#  -------------------------------------------------------------------------------------------------

# def is_password_good(password):
#     flag, counter1, counter2, counter3 = True, 0, 0, 0
#     if len(password) < 8:
#         flag = False
#     for c in password:
#         if c.isdigit():
#             counter3 += 1
#         elif c == c.upper():
#             counter1 += 1
#         elif c == c.lower():
#             counter2 += 1
#     if counter1 < 1 or counter2 < 1 or counter3 < 1:
#         flag = False
#     return flag

#  -------------------------------------------------------------------------------------------------
#  TASK 236 (Ровно в одном)
#  -------------------------------------------------------------------------------------------------
#   Напишите функцию is_one_away(word1, word2), которая принимает в качестве аргументов два слова word1 и word2
#   и возвращает значение True если слова имеют одинаковую длину и отличаются ровно в 1 символе и False в противном.
#  -------------------------------------------------------------------------------------------------

# def is_one_away(word1, word2):
#     counter = 0
#     if len(word1) != len(word2):
#         return False
#     for i in range(len(word1)):
#         if word1[i] != word2[i]:
#             counter += 1
#     if counter == 1:
#         return True
#     else:
#         return False

#  -------------------------------------------------------------------------------------------------
#  TASK 237 (Палиндром)
#  -------------------------------------------------------------------------------------------------
#   Напишите функцию is_palindrome(text), которая принимает в качестве аргумента строку text и возвращает значение True
#   если указанный текст является палиндромом и False в противном случае.
#  -------------------------------------------------------------------------------------------------

# def is_palindrome(text):
#     temp = text
#     for i in range(len(text)):
#         if text[i] in " ,.!?-":
#             temp = temp.replace(text[i], '')
#     return temp.lower() == temp[::-1].lower()

#  -------------------------------------------------------------------------------------------------
#  TASK 238 (BEEGEEK)
#  -------------------------------------------------------------------------------------------------
#   BEEGEEK наконец открыл свой банк в котором используются специальные банкоматы с необычным паролем.
#   Действительный пароль BEEGEEK банка имеет вид a:b:c, где a, b и c – натуральные числа.
#   Поскольку основатель BEEGEEK фанатеет от математики, то он решил:
#   число a – должно быть палиндромом; число b – должно быть простым; число c – должно быть четным.
#   Напишите функцию is_valid_password(password), которая принимает в качестве аргумента строковое значение
#   пароля password и возвращает значение True если пароль является действительным паролем и False в противном случае.
#  -------------------------------------------------------------------------------------------------

# def is_valid_password(password):
#     nums, flag, counter = password.split(':'), True, 0
#     if len(nums) != 3:
#         flag = False
#         return flag
#     elif nums[0] != nums[0][::-1]:
#         flag = False
#         return flag
#     for i in range(1, int(nums[1]) + 1):
#         if int(nums[1]) % i == 0:
#             counter += 1
#     if counter != 2:
#         flag = False
#         return flag
#     if int(nums[2]) % 2 != 0:
#         flag = False
#         return flag
#     return flag

#  -------------------------------------------------------------------------------------------------
#  TASK 239 (Правильная скобочная последовательность)
#  -------------------------------------------------------------------------------------------------
#   Напишите функцию is_correct_bracket(text), которая принимает в качестве аргумента непустую строку text,
#   состоящую из символов ( и ) и возвращает значение True если поступившая на вход строка является
#   правильной скобочной последовательностью и False в противном случае.
#  -------------------------------------------------------------------------------------------------

# def is_correct_bracket(text):
#     total = 0
#     if text[0] == ")" or text[-1] == "(":
#         return False
#     for i in range(len(text)):
#         if text[i] == "(":
#             total += 1
#         else:
#             total -= 1
#             if total < 0:
#                 return False
#     if total == 0:
#         return True
#     else:
#         return False

#  -------------------------------------------------------------------------------------------------
#  TASK 240 (Змеиный регистр)
#  -------------------------------------------------------------------------------------------------
#   Напишите функцию convert_to_python_case(text), которая принимает в
#   качестве аргумента строку в «верблюжьем регистре» и преобразует его в «змеиный регистр».
#  -------------------------------------------------------------------------------------------------

# def convert_to_python_case(text):
#     length = len(text)
#     text = text[0].lower() + text[1:]
#     for i in range(1, length):
#         if text[i] == text[i].upper():
#             text = text[:i] + "_" + text[i].lower() + text[i+1:]
#             length += 1
#     return text

#  -------------------------------------------------------------------------------------------------
#  TASK 241 (Середина отрезка)
#  -------------------------------------------------------------------------------------------------
#   Напишите функцию get_middle_point(x1, y1, x2, y2), которая принимает в качестве аргументов координаты
#   концов отрезка  и возвращает координаты точки являющейся серединой данного отрезка.
#  -------------------------------------------------------------------------------------------------

# def get_middle_point(x1, y1, x2, y2):
#     return (x1 + x2) / 2, (y1 + y2) / 2

#  -------------------------------------------------------------------------------------------------
#  TASK 242 (Площадь и длина)
#  -------------------------------------------------------------------------------------------------
#   Напишите функцию get_circle(radius), которая принимает в качестве аргумента радиус окружности и
#   возвращает два значения: длину окружности и площадь круга, ограниченного данной окружностью.
#  -------------------------------------------------------------------------------------------------

# def get_circle(radius):
#     return 2 * math.pi * r, math.pi * r ** 2

#  -------------------------------------------------------------------------------------------------
#  TASK 243 (Корни уравнения)
#  -------------------------------------------------------------------------------------------------
#   Напишите функцию solve(a, b, c), которая принимает в качестве аргументов три целых числа a, b, c –
#   коэффициенты квадратного уравнения ax^2+bx+c = 0 и возвращает его корни в порядке возрастания.
#  -------------------------------------------------------------------------------------------------

# import math
# def solve(a, b, c):
#     d = b ** 2 - 4 * a * c
#     if  d == 0:
#         return (-(b / (2 * a))), (-(b / (2 * a)))
#     else:
#         x1 = (-b - math.sqrt(d))/ (2 * a)
#         x2 = (-b + math.sqrt(d)) / (2 * a)
#     return min(x1, x2), max(x1, x2)
