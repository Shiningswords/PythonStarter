#  -------------------------------------------------------------------------------------------------
#  TASK 021 (Список по образцу 1)
#  -------------------------------------------------------------------------------------------------
#  На вход программе подается число n. Напишите программу, которая создает и выводит построчно список,
#  состоящий из n списков [[1, 2, ..., n], [1, 2, ..., n], ..., [1, 2, ..., n]].
#  -------------------------------------------------------------------------------------------------

# n, arr = int(input()), []
# for i in range(n):
#     arr.append([0] * n)
#     for j in range(0, n):
#         arr[i][j] = j+1
# print(*arr, sep='\n')

#  -------------------------------------------------------------------------------------------------
#  TASK 022 (Список по образцу 2)
#  -------------------------------------------------------------------------------------------------
#  На вход программе подается число n. Напишите программу, которая создает и выводит построчно вложенный список,
#  состоящий из n списков [[1], [1, 2], [1, 2, 3], ..., [1, 2, ..., n]].
#  -------------------------------------------------------------------------------------------------

# n, arr = int(input()), []
# for i in range(1, n+1):
#     arr.append([j for j in range(1, i+1)])
# print(*arr, sep='\n')

#  -------------------------------------------------------------------------------------------------
#  TASK 023 (Треугольник Паскаля 1)
#  -------------------------------------------------------------------------------------------------
#  Треугольник Паскаля — бесконечная таблица биномиальных коэффициентов, имеющая треугольную форму.
#  В этом треугольнике на вершине и по бокам стоят единицы. Каждое число равно сумме двух расположенных над ним чисел.
# 0:      1
# 1:     1 1
# 2:    1 2 1
# 3:   1 3 3 1
# 4:  1 4 6 4 1
#       .....
# На вход программе подается число nn. Напишите программу,
# которая возвращает указанную строку треугольника Паскаля в виде списка (нумерация строк начинается с нуля).
#  -------------------------------------------------------------------------------------------------

# n, arr = int(input()) + 1, []
# for i in range(n):
#     temp = []
#     temp.append(1)
#     if i >= 1:
#         for j in range(1, i):
#             temp.append(arr[i-1][j-1] + arr[i-1][j])
#         temp.append(1)
#     arr.append(temp)
# print(arr[n-1])

#  -------------------------------------------------------------------------------------------------
#  TASK 024 (Треугольник Паскаля 2)
#  -------------------------------------------------------------------------------------------------
#  На вход программе подается натуральное число n.
#  Напишите программу, которая выводит первые n строк треугольника Паскаля.
#  -------------------------------------------------------------------------------------------------

# n, arr = int(input()), []
# for i in range(n):
#     temp = []
#     temp.append(1)
#     if i >= 1:
#         for j in range(1, i):
#             temp.append(arr[i-1][j-1] + arr[i-1][j])
#         temp.append(1)
#     arr.append(temp)
# for i in range(len(arr)):
#         print(*arr[i], end='\n')

#  -------------------------------------------------------------------------------------------------
#  TASK 025 (Упаковка дубликатов)
#  -------------------------------------------------------------------------------------------------
#  На вход программе подается строка текста, содержащая символы.
#  Напишите программу, которая упаковывает последовательности одинаковых символов заданной строки в подсписки.
#  -------------------------------------------------------------------------------------------------

# chars, res = input().split(), []
# res.append([chars[0]])
# for i in range(1, len(chars)):
#     if chars[i] == chars[i-1]:
#         res[-1].append(chars[i])
#     else:
#         res.append([chars[i]])
# print(res)

#  -------------------------------------------------------------------------------------------------
#  TASK 026 (Разбиение на чанки)
#  -------------------------------------------------------------------------------------------------
#  На вход программе подаются две строки, на одной символы, на другой число n. Из первой строки формируется список.
#  Реализуйте функцию chunked(), которая принимает на вход список и число, задающее размер чанка (куска),
#  а возвращает список из чанков указанной длины.
#  -------------------------------------------------------------------------------------------------

# def chunked(arr, num):
#     temp = []
#     res = []
#     for i in range(len(arr)):
#         temp.append(arr[i])
#         if len(temp) == num:
#             res.append(temp)
#             temp = []
#     if len(temp) > 0:
#         res.append(temp)
#     return res
#
# arr = input().split()
# num = int(input())
#
# print(chunked(arr, num))

#  -------------------------------------------------------------------------------------------------
#  TASK 027 (Подсписки списка)
#  -------------------------------------------------------------------------------------------------
#  Подсписок — часть другого списка. Подсписок может содержать один элемент, несколько, и даже ни одного. Например,
#  [1], [2], [3] и [4] — подсписки списка [1, 2, 3, 4]. Список [2, 3] — подсписок списка [1, 2, 3, 4], но список [2, 4]
#  не подсписок списка [1, 2, 3, 4], так как элементы 2 и 4 во втором списке не смежные. Пустой список —
#  подсписок любого списка. Сам список — подсписок самого себя,
#  то есть список [1, 2, 3, 4] подсписок списка [1, 2, 3, 4].
# На вход программе подается строка текста, содержащая символы. Из данной строки формируется список.
# Напишите программу, которая выводит список, содержащий все возможные подсписки списка, включая пустой список.
#  -------------------------------------------------------------------------------------------------

# chars, res = input().split(), [[]]
# for i in range(len(chars)):
#     res.append([chars[i]])
# for i in range(1, len(chars) - 1):
#     for j in range(len(chars) - 1):
#         if j + i + 1 < len(chars) + 1:
#             res.append(chars[j:j + i + 1])
# if len(chars) > 1:
#     res.append(chars)
# print(res)

