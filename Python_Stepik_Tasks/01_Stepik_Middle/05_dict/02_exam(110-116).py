#  -------------------------------------------------------------------------------------------------
#  TASK 110 (Минутка генетики)
#  -------------------------------------------------------------------------------------------------
#  Напишите программу, переводящую цепь ДНК в цепь РНК.
#  -------------------------------------------------------------------------------------------------

# rnk = {"G": "C", "C": "G", "T": "A", "A": "U"}
# dna = input()
# for c in dna:
#     print(rnk[c], end='')

#  -------------------------------------------------------------------------------------------------
#  TASK 111 (Порядковый номер)
#  -------------------------------------------------------------------------------------------------
#  Дана строка текста на русском языке, состоящая из слов и символов пробела. Словом считается последовательность букв,
#  слова разделены одним пробелом или несколькими. Напишите программу, определяющую для каждого слова порядковый номер
#  его вхождения в текст именно в этой форме, с учетом регистра. Для первого вхождения слова программа выведет 11,
#  для второго вхождения того же слова — 22 и т. д.
#  -------------------------------------------------------------------------------------------------

# txt = input().split()
# dict1 = {}
# for w in txt:
#     dict1[w] = dict1.get(w, 0) + 1
#     print(dict1[w], end=' ')

#  -------------------------------------------------------------------------------------------------
#  TASK 112 (Scrabble game)
#  -------------------------------------------------------------------------------------------------
#  В игре Scrabble каждая буква приносит определенное количество баллов. Общая стоимость слова – сумма баллов его букв.
#  Чем реже буква встречается, тем больше она ценится:
#  -------------------------------------------------------------------------------------------------

# d = {'A': 1, 'E': 1, 'I': 1, 'L': 1, 'N': 1, 'O': 1, 'R': 1, 'S': 1, 'T': 1, 'U': 1, 'D': 2, 'G': 2, 'B': 3, 'C': 3,
#      'M': 3, 'P': 3, 'F': 4, 'H': 4, 'V': 4, 'W': 4, 'Y': 4, 'K': 5, 'J': 8, 'X': 8, 'Q': 10, 'Z': 10}
# word, total = input(), 0
# for c in word:
#     total += d[c]
# print(total)

#  -------------------------------------------------------------------------------------------------
#  TASK 113 (Строка запроса)
#  -------------------------------------------------------------------------------------------------
#  Строка запроса (query string) — часть URL адреса, содержащая ключи и их значения.
#  Она начинается после вопросительного знака и идет до конца адреса. Например:
#  https://beegeek.ru?name=timur     # строка запроса: name=timur
#  Если параметров в строке запроса несколько, то они отделяются символом амперсанда &:
#  https://beegeek.ru?name=timur&color=green     # строка запроса: name=timur&color=green
#  Напишите функцию build_query_string(), которая принимает на вход словарь с параметрами и возвращает строку запроса,
#  сформированную из этих параметров.
#  -------------------------------------------------------------------------------------------------

# def build_query_string(dict1):
#     return'&'.join(sorted([f"{i}={j}" for i,j in zip(dict1.keys(), dict1.values())]))

#  -------------------------------------------------------------------------------------------------
#  TASK 114 (Слияние словарей)
#  -------------------------------------------------------------------------------------------------
#  Напишите функцию merge(), объединяющую словари в один общий. Функция должна принимать список словарей и
#  возвращать словарь, каждый ключ которого содержит множество (тип данных set) уникальных значений
#  собранных из всех словарей переданного списка.
#  -------------------------------------------------------------------------------------------------

# def merge(values):      # values - это список словарей
#     res = {}
#     for i in values:
#         for k in i.keys():
#             res.setdefault(k, set()).add(i[k])
#     return res

#  -------------------------------------------------------------------------------------------------
#  TASK 115 (Опасный вирус)
#  -------------------------------------------------------------------------------------------------
#  В файловую систему компьютера, на котором развернута наша ❤️ платформа Stepik, проник опасный вирус и сломал
#  контроль прав доступа к файлам. Говорят, вирус написал один из студентов курса Python для начинающих.
#  Для каждого файла известно, с какими действиями можно к нему обращаться:
#  запись W (write, доступ на запись в файл); чтение R (read, доступ на чтение из файла);
#  запуск X (execute, запуск на исполнение файла).
#  Напишите программу для восстановления контроля прав доступа к файлам. Ваша программа для каждого запроса
#  должна будет возвращать OK если выполняется допустимая операция, и Access denied, если операция недопустима.
#  -------------------------------------------------------------------------------------------------

# action = {'write': 'W', 'read': 'R','execute': 'X'}
# n, files = int(input()), {}
# for i in range(n):
#     temp = input().split()
#     files.update({temp[0]: temp[1:]})
# m = int(input())
# for i in range(m):
#     temp = input().split()
#     if action[temp[0]] in files[temp[1]]:
#         print('OK')
#     else:
#         print('Access denied')

#  -------------------------------------------------------------------------------------------------
#  TASK 116 (Покупки в интернет-магазине)
#  -------------------------------------------------------------------------------------------------
#  Напишите программу для подсчета количества единиц каждого вида товара из приобретенных
#  каждым покупателем интернет-магазина.
#  -------------------------------------------------------------------------------------------------

# n, res = int(input()), {}
# for _ in range(n):
#     temp = input().split()
#     if temp[0] not in res:
#         res[temp[0]] = {temp[1]: int(temp[2])}
#     else:
#         if temp[1] not in res[temp[0]]:
#             res[temp[0]].setdefault(temp[1], int(temp[2]))
#         else:
#             res[temp[0]][temp[1]] = res[temp[0]][temp[1]] + int(temp[2])
# for k in sorted(res.keys()):
#     print(f'{k}:')
#     for i in sorted(res[k]):
#         print(f'{i} {res[k][i]}')
