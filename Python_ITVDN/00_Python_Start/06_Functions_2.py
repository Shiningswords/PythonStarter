# ---------------------------------------------------------------------------------------------
# ДОКУМЕНТАЦИОННЫЕ СТРОКИ К ФУНКЦИЯМ
# ---------------------------------------------------------------------------------------------
# def function():
#     """Строка, стоящая в самом начале функции (а также модуля, класса или метода),
#     играет роль особого вида комментариев – документационной строки (docstring).
#     """
#     print('function called\n\n')
#
#
# # Вызов функции
# function()
#
# # Вывод документационной строки на экран.
# # После имени функции нет круглых скобок, поэтому она не вызывается,
# # а сама рассматривается как определённый объект
# print(function.__doc__)
#
# # Функция help служит для вывода справки
# help(function)  # вызов справки по определённой пользователем функции
# help(print)     # вызов справки по стандартной функции
# ---------------------------------------------------------------------------------------------
# ВСТРОЕННЫЕ ФУНКЦИИ
# ---------------------------------------------------------------------------------------------
# Функции bin, oct и hex возвращают строки, представляющие
# данное число в соответствующих системах счисления

# number = int(input('Введите число: '))
# print('Двоичная система:         ', bin(number))
# print('Восьмеричная система:     ', oct(number))
# print('Шестнадцатеричная система:', hex(number))
# ---------------------------------------------------------------------------------------------
# reversed позволяет обходить последовательность в обратном порядке
# for i in reversed(range(5)):
#     print(i)
# ---------------------------------------------------------------------------------------------
# a = 5
# b = 7
# c = 2
#
# # минимальное значение
# print(min(a, b, c))
# # максимальное значение
# print(max(a, b, c))
# ---------------------------------------------------------------------------------------------
# ВЛОЖЕННЫЕ ФУНКЦИИ
# ---------------------------------------------------------------------------------------------
# def outer_function():
#     # объявление функции локально
#     def inner_function():
#         print('Внутренняя функция')
#     print('Внешняя функция')
#     # вызов функции
#     inner_function()
#
# # вызов внешней функции
# outer_function()
# # inner_function()  # ошибка, здесь эта функция недоступна
# ---------------------------------------------------------------------------------------------
# ОБЛАСТЬ ВИДИМОСТИ
# ---------------------------------------------------------------------------------------------
# def function():
#     print(var)  # получеие доступа к глобальной переменной
#
# var = 'глобальная переменная'
# function()
# ---------------------------------------------------------------------------------------------
# def function():
#     # определение локальной переменной
#     var = 'локальная переменная'
#     # вывод значения локальной переменной на экран
#     print(var)
#
# # определение глобальной переменной
# var = 'глобальная переменная'
# function()
# # вывод значения глобальной переменной на экран
# print(var)
# ---------------------------------------------------------------------------------------------
# def function():
#     # global указывает, что необходимо получать доступ к глобальной переменной
#     # var, а не создавать новую локальную при попытке что-либо ей присвоить
#     global var
#     # вывод значения глобальной переменной на экран
#     print(var)
#     # изменение глобальной переменной
#     var = 'новое значение'
#     # вывод значения глобальной переменной на экран
#     print(var)
#
# var = 'глобальная переменная'
# function()
# print(var)
# ---------------------------------------------------------------------------------------------
# def function(c, d):
#     # a, b -- глобальные переменные; c, d -- локальные
#     global a, b
#     # изменение значения глобальной переменной
#     a = 5
#     # изменение значения глобальной переменной
#     b = 7
#     # создание локальной переменной с тем же именем, что и у глобальной
#     c = 10
#     # создание локальной переменной с тем же именем, что и у глобальной
#     d = 12
#
# a, b, c, d = 1, 2, 3, 4  # множественное присваивание
# print(a, b, c, d)  # 1 2 3 4
# function(c, d)
# print(a, b, c, d)  # 5 7 3 4
# ---------------------------------------------------------------------------------------------
# def outer_function():
#     var = 8  # создание локальной переменной var
#
#     def inner_function():
#         # указывает, что необходимо использовать переменную из внешней функции
#         nonlocal var
#         print(var)  # 8
#         var = 10
#
#     print(var)  # 8
#     inner_function()  # вызов внутренней функции
#     print(var)  # 10
#
#
# # создание глобальной переменной var
# var = 0
# print(var)  # 0
# outer_function()
# print(var)  # 0
# ---------------------------------------------------------------------------------------------
# def outer_function():
#     var = 8  # создание локальной переменной var
#
#     def inner_function():
#         # указывает, что необходимо использовать глобальную переменную
#         global var
#         print(var)  # 0
#         var = 10
#
#     print(var)  # 8
#     inner_function()  # вызов внутренней функции
#     print(var)  # 8
#
#
# # создание глобальной переменной var
# var = 0
# print(var)  # 0
# outer_function()
# print(var)  # 10
